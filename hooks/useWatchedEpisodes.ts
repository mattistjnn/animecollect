import { useState, useCallback, useEffect } from 'react';
import { 
  markEpisodeAsWatched, 
  unmarkEpisodeAsWatched, 
  isEpisodeWatched,
  getWatchedEpisodes 
} from '@/lib/database';

export const useWatchedEpisodes = (animeId?: string) => {
  const [watchedEpisodes, setWatchedEpisodes] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  // Charger les √©pisodes visionn√©s pour un anime
  const refreshWatchedEpisodes = useCallback(async () => {
    if (!animeId) return;
    
    try {
      setIsLoading(true);
      const watchedIds = await getWatchedEpisodes(animeId);
      setWatchedEpisodes(watchedIds);
    } catch (error) {
      console.error('Erreur lors du chargement des √©pisodes visionn√©s:', error);
    } finally {
      setIsLoading(false);
    }
  }, [animeId]);

  // Marquer un √©pisode comme visionn√©
  const markAsWatched = useCallback(async (episodeId: string): Promise<void> => {
    try {
      console.log('üé¨ Marquage √©pisode comme vu:', episodeId);
      await markEpisodeAsWatched(episodeId);
      
      // Mettre √† jour l'√©tat local
      setWatchedEpisodes(prev => {
        if (!prev.includes(episodeId)) {
          return [...prev, episodeId];
        }
        return prev;
      });
      
      console.log('‚úÖ √âpisode marqu√© comme vu avec succ√®s');
    } catch (error) {
      console.error('‚ùå Erreur lors du marquage:', error);
      throw error;
    }
  }, []);

  // D√©marquer un √©pisode comme visionn√©
  const unmarkAsWatched = useCallback(async (episodeId: string): Promise<void> => {
    try {
      console.log('üé¨ D√©marquage √©pisode:', episodeId);
      await unmarkEpisodeAsWatched(episodeId);
      
      // Mettre √† jour l'√©tat local
      setWatchedEpisodes(prev => prev.filter(id => id !== episodeId));
      
      console.log('‚úÖ √âpisode d√©marqu√© avec succ√®s');
    } catch (error) {
      console.error('‚ùå Erreur lors du d√©marquage:', error);
      throw error;
    }
  }, []);

  // V√©rifier si un √©pisode est visionn√©
  const isWatched = useCallback(async (episodeId: string): Promise<boolean> => {
    try {
      return await isEpisodeWatched(episodeId);
    } catch (error) {
      console.error('Erreur lors de la v√©rification:', error);
      return false;
    }
  }, []);

  // V√©rifier si un √©pisode est visionn√© (version synchrone bas√©e sur l'√©tat local)
  const isWatchedSync = useCallback((episodeId: string): boolean => {
    return watchedEpisodes.includes(episodeId);
  }, [watchedEpisodes]);

  // Toggle l'√©tat d'un √©pisode
  const toggleWatched = useCallback(async (episodeId: string): Promise<boolean> => {
    const currentlyWatched = isWatchedSync(episodeId);
    
    if (currentlyWatched) {
      await unmarkAsWatched(episodeId);
      return false;
    } else {
      await markAsWatched(episodeId);
      return true;
    }
  }, [isWatchedSync, markAsWatched, unmarkAsWatched]);

  // Charger les donn√©es au montage du composant
  useEffect(() => {
    refreshWatchedEpisodes();
  }, [refreshWatchedEpisodes]);

  return {
    watchedEpisodes,
    isLoading,
    markAsWatched,
    unmarkAsWatched,
    isWatched,
    isWatchedSync,
    toggleWatched,
    refreshWatchedEpisodes
  };
};